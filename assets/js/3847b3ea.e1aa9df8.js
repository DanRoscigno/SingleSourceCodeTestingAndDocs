"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[12],{7017:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>r});var s=n(7624),i=n(2172);const o={sidebar_position:10},a="Single sourcing documentation code snippets from end to end tests",d={id:"setup",title:"Single sourcing documentation code snippets from end to end tests",description:"Live site//danroscigno.github.io/SingleSourceCodeTestingAndDocs/docs",source:"@site/docs/setup.md",sourceDirName:".",slug:"/setup",permalink:"/SingleSourceCodeTestingAndDocs/docs/setup",draft:!1,unlisted:!1,editUrl:"https://github.com/DanRoscigno/SingleSourceCodeTestingAndDocs/blob/main/website/docs/setup.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",next:{title:"Embedding snippets of code from GitHub",permalink:"/SingleSourceCodeTestingAndDocs/docs/"}},c={},r=[{value:"Two lifecycles for technical documentation",id:"two-lifecycles-for-technical-documentation",level:2},{value:"Documenting a feature",id:"documenting-a-feature",level:4},{value:"Overview/Rant",id:"overviewrant",level:2},{value:"The fix",id:"the-fix",level:2},{value:"Example",id:"example",level:2},{value:"Components",id:"components",level:2},{value:"Running the system",id:"running-the-system",level:2},{value:"Add a new test",id:"add-a-new-test",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"single-sourcing-documentation-code-snippets-from-end-to-end-tests",children:"Single sourcing documentation code snippets from end to end tests"}),"\n",(0,s.jsxs)(t.p,{children:["Live site: ",(0,s.jsx)(t.a,{href:"https://danroscigno.github.io/SingleSourceCodeTestingAndDocs/docs",children:"https://danroscigno.github.io/SingleSourceCodeTestingAndDocs/docs"})]}),"\n",(0,s.jsx)(t.h2,{id:"two-lifecycles-for-technical-documentation",children:"Two lifecycles for technical documentation"}),"\n",(0,s.jsx)(t.h4,{id:"documenting-a-feature",children:"Documenting a feature"}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:" Production failure driven lifecycle "}),(0,s.jsx)("td",{children:" CI test driven lifecycle "})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(t.mermaid,{value:"flowchart TD\n\nC[Write Docs]--\x3e \nE[Test docs by hand]\nE --\x3eG\nG{Pass}\nG -- yes --\x3eJ\nG -- no --\x3eC\nJ[/Publish Docs/] --\x3e\nM[/Breaking change/] --\x3e\nP[/Receive Complaint/] \n--\x3e E"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("br",{}),(0,s.jsx)(t.mermaid,{value:"flowchart TD\n\nC[/Publish CI Test/]--\x3e \nE[Include Test in Docs]--\x3e \nJ[/Publish Docs/] --\x3e\nM[/Breaking change/] --\x3e\nP[/CI Fails/] -- Update the tests --\x3eC\nC"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"overviewrant",children:"Overview/Rant"}),"\n",(0,s.jsx)(t.p,{children:"A year or two ago I saw a GitHub issue related to a bug in some documentation\nthat I wrote. Later in the same week I saw another issue about a different page\nin the docs. Both of these issues were related to key features that the\ncommunity and customers were using in production."}),"\n",(0,s.jsx)(t.p,{children:"After retesting the steps in the docs and confirming that the issues were\naccurate I looked through the release notes and found the related breaking\nchanges."}),"\n",(0,s.jsx)(t.p,{children:"Waiting for the community and customers to find the bugs in the docs or bugs in\nthe code is a common problem, and it is embarrassing."}),"\n",(0,s.jsx)(t.p,{children:"The best way to know when software changes is to run tests against every code\nchange. This is common for code changes, but somehow the code changes and sample\ndata used in the tests don't make their way into the documentation."}),"\n",(0,s.jsx)(t.h2,{id:"the-fix",children:"The fix"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Treat the docs as code."}),"\n",(0,s.jsx)(t.li,{children:"As end to end docs (tutorials, quick starts, how to guides) are designed they\nshould be written as test plans."}),"\n",(0,s.jsx)(t.li,{children:"Automate the test plan."}),"\n",(0,s.jsx)(t.li,{children:"Write the doc, but instead of copy/pasting the code snippets (SQL in my case)\ninto the docs, import the snippets directly from the automated test."}),"\n",(0,s.jsx)(t.li,{children:"Run the test suite on a regular basis."}),"\n",(0,s.jsx)(t.li,{children:"As tests fail get the code fixed if the failure indicates a bug, or update the\ntest to include the new behavior of the system. The update to the test should cause\nan update to the documentation as the doc system is pulling the code snippets\nfrom the tests."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.p,{children:"A recent feature of the project I am working on queries data in files stored\nin object storage (for example, Amazon S3) figures out the schema of the data, then\ncreates and populates a table in a database."}),"\n",(0,s.jsx)(t.p,{children:"The SQL that causes this magic to happen looks like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-plaintext",children:'-- Create table from S3 using FILES() table function\nCREATE TABLE DocsQA.user_behavior_inferred\nAS SELECT * FROM FILES (\n\t"path" = "s3://starrocks-examples/user_behavior_ten_million_rows.parquet",\n\t"format" = "parquet",\n\t"aws.s3.region" = "us-east-1",\n\t-- highlight-start\n\t"aws.s3.access_key" = "AAAAAAAAAAAAAAAAAAAA",\n\t"aws.s3.secret_key" = "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"\n\t-- highlight-end\n);\n'})}),"\n",(0,s.jsx)(t.p,{children:"Yesterday I would have copied the above out of the SQL client I used to run\nthe query and pasted it into a Markdown file. But today I would instead use\nthis syntax to grab the above from the test specification like so:"}),"\n",(0,s.jsx)("pre",{children:(0,s.jsxs)(t.p,{children:['```sql reference title="Create table from S3 using FILES() table function"\n',(0,s.jsx)(t.a,{href:"https://github.com/DanRoscigno/docs/blob/6d6fcf905162adf80bd094cb9dd133a5c557bdd3/SQL/files_table_fxn.sql#L1-L11",children:"https://github.com/DanRoscigno/docs/blob/6d6fcf905162adf80bd094cb9dd133a5c557bdd3/SQL/files_table_fxn.sql#L1-L11"}),"\n```"]})}),"\n",(0,s.jsx)(t.p,{children:"In the docs this looks like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",metastring:'reference title="Create table from S3 using FILES() table function"',children:"https://github.com/DanRoscigno/docs/blob/6d6fcf905162adf80bd094cb9dd133a5c557bdd3/SQL/files_table_fxn.sql#L1-L11\n"})}),"\n",(0,s.jsx)(t.h2,{id:"components",children:"Components"}),"\n",(0,s.jsxs)(t.p,{children:["The documentation in this proof of concept repository is generated with\n",(0,s.jsx)(t.a,{href:"https://docusaurus.io/",children:"Docusaurus version 3"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The sample tests are run against the StarRocks database and the testing system\nis built with ",(0,s.jsx)(t.a,{href:"https://onsi.github.io/ginkgo/",children:"Golang, Ginkgo, and Gomega"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["Code snippets are imported from the tests using ",(0,s.jsx)(t.a,{href:"https://github.com/christian-bromann/docusaurus-theme-github-codeblock/blob/main/README.md",children:(0,s.jsx)(t.code,{children:"docusaurus-theme-github-codeblock"})})]}),"\n",(0,s.jsx)(t.h2,{id:"running-the-system",children:"Running the system"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Clone this repo"}),"\n",(0,s.jsx)(t.li,{children:"Build the Ginkgo container"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"cd ci\ndocker build -f ginkgo.Dockerfile -t ginkgo .\n"})}),"\n",(0,s.jsxs)(t.ol,{start:"3",children:["\n",(0,s.jsx)(t.li,{children:"Start StarRocks"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"docker compose --profile starrocks up --detach --wait --wait-timeout 60\n"})}),"\n",(0,s.jsxs)(t.ol,{start:"4",children:["\n",(0,s.jsx)(t.li,{children:"Run the tests"}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"docker compose run test-harness\n"})}),"\n",(0,s.jsx)(t.h2,{id:"add-a-new-test",children:"Add a new test"}),"\n",(0,s.jsxs)(t.p,{children:["To test the basic ",(0,s.jsx)(t.a,{href:"https://docs.starrocks.io/docs/quick_start/shared-nothing/",children:"quickstart"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"ginkgo generate quickstart_basic\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.M)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);